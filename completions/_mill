#compdef mill
# Install this file somewhere in your $FPATH (Zsh completion path)

# shellcheck shell=bash
# shellcheck disable=SC2207
__mill_debug() {
  # To enable debug, export in the shell the ZSH_COMP_DEBUG_FILE variable to a file.
  # Eg. ZSH_COMP_DEBUG_FILE="/tmp/mill_debug.txt"
  # Tail that file to see the debug output.
  local file="$ZSH_COMP_DEBUG_FILE"
  if [[ -n ${file} ]]; then
    echo "$*" >>"${file}"
  fi
}

_mill() {
  __mill_debug "\n========= starting completion logic =========="
  zstyle ':completion:*:mill:*' sort false
  projname=$(basename "${PWD}")          # Used to differenciate the cache files
  cachedata="true"                       # "true" or "false"
  cachepath="/tmp"                       # Where to store the cache files
  cachefile="zsh-cache-mill-${projname}" # Cache file names
  cachetime=60                           # Cache file validity in minutes

  __mill_debug "Project: ${projname}"

  local state line lastParam lastChar

  local -a opts
  opts+=(
    '--define[ <k=v>    Define (or overwrite) a system property.']
    '--allow-positional[Allows command args to be passed positionally without "--arg" by default']
    '--bell[Ring the bell once if the run completes successfully, twice if it fails.']
    '--bsp[Enable BSP server mode.']
    '--color[Toggle colored output; by default enabled only if the console is interactive']
    '--debug[Show debug output on STDOUT']
    '--disable-callgraph[Disables fine-grained invalidation of tasks based on analyzing code changes. If passed, you need to manually run "clean" yourself after build changes.']
    '--disable-prompt[Disables the new multi-line status prompt used for showing thread status at the command line and falls back to the legacy ticker']
    '--help[Print this help message and exit.']
    '--interactive[Run Mill in interactive mode, suitable for opening REPLs and taking user input. This implies --no-server. Must be the first argument.']
    '--import[Additional ivy dependencies to load into mill, e.g. plugins.']
    '--jobs[The number of parallel threads. It can be an integer e.g. "5" meaning 5 threads, an expression e.g. "0.5C" meaning half as many threads as available cores, or "C-2" meaning 2 threads less than the number of cores.']
    '--keep-going[Continue build, even after build failures.]'
    '--meta-level[Select a meta-level to run the given tasks. Level 0 is the main project in "build.mill", level 1 the first meta-build in "mill-build/build.mill", etc.']
    '--no-server[Run without a background server. Must be the first argument.']
    '--silent[Make ivy logs during script import resolution go silent instead of printing']
    '--ticker[Enable ticker log (e.g. short-lived prints of stages and progress bars).]'
    '--version[Show mill version information and exit.]'
    '--watch[Watch and re-run the given tasks when when their inputs change.]'
  )

  _arguments -C \
    "1: :->cmds" \
    "*::arg:->args"

  lastParam=${line[-1]}
  lastChar=${lastParam[-1]}

  __mill_debug "Vars: state: ${state} / line: ${line} / lastParam: ${lastParam} / lastChar: ${lastChar}"
  # Check if there is a build.sc or build.mill file and save in a variable
  if [[ -f build.sc ]]; then
    BUILDFILE="build.sc"
  elif [[ -f build.mill ]]; then
    BUILDFILE="build.mill"
  elif [[ -f build.mill.scala ]]; then
    BUILDFILE="build.mill.scala"
  fi
  if [[ ${lastChar} == '.' ]]; then # Query target
    __mill_debug "Query tasks for ${lastParam}"
    _query_with_cache "${lastParam}"
  # Query tasks for the target
  elif [[ ${lastParam} == *"."* ]]; then # Query task for the target
    IFS='.' read -rA tgt <<<"${lastParam}"
    __mill_debug "Query tasks for pre-typed ${tgt[1]}"
    _query_with_cache "${tgt[1]}."
  # List aliases
  elif [[ ${line} == *"Alias/run"* ]]; then
    __mill_debug "Listing aliases"
    local -a aliases
    aliases+=($(sed -n '/extends Aliases {/,/\}}/p' "${BUILDFILE}" | grep def | tr -s ' ' | cut -d\  -f3))
    __mill_debug "Target aliases: " "${aliases[@]}"
    compadd -q "${aliases[@]}"
  # Query mill root commands or flags
  else
    __mill_debug "Query root commands"
    _query_with_cache "root"
    aliasobj=$(grep "extends Aliases" "${BUILDFILE}" | cut -d" " -f2)
    if [[ $aliasobj ]]; then
      __mill_debug "Aliases found, adding commands"
      local -a _descriptions _values
      _descriptions=(
        'Alias/help           -- aliases plugin help'
        'Alias/list           -- list all aliases'
        'Alias/run            -- run alias'
      )
      _values=(
        'Alias/help'
        'Alias/list'
        'Alias/run'
      )
      compadd -d _descriptions -a _values
    fi
    _arguments -C "${opts[@]}"
  fi
}

_query_with_cache() {
  local target
  local -a milltargetcmds
  if [[ "${1}" == "root" ]]; then
    target="_"
  else
    target="${1}_"
  fi
  # Check if there is a build.sc or build.mill file and save in a variable
  if [[ -f build.sc ]]; then
    BUILDFILE="build.sc"
  elif [[ -f build.mill ]]; then
    BUILDFILE="build.mill"
  elif [[ -f build.mill.scala ]]; then
    BUILDFILE="build.mill.scala"
  fi
  target="${target//\\/}" # Remove backslashes
  __mill_debug "Query cache param: ${1}"
  __mill_debug "Query target: ${target}"
  if [[ "${cachedata}" == "true" ]]; then
    # Cache the mill tasks
    if test "$(find ${cachepath}/ -name "${cachefile}-${target}" -mmin -${cachetime} 2>/dev/null)" && [[ "${cachepath}/${cachefile}-${target}" -nt "${BUILDFILE}" ]]; then
      __mill_debug "Cache file ${cachepath}/${cachefile}-${target} exists and is newer than ${cachetime} mins and ${BUILDFILE} file not changed."
      milltargetcmds=($(cat "${cachepath}/${cachefile}-${target}"))
    else
      __mill_debug "Cache file ${cachepath}/${cachefile}-${target} does not exist or is older than ${cachetime} or ${BUILDFILE} file changed."
      milltargetcmds=($(mill --disable-ticker resolve "${target}" 2>/dev/null))
      echo "${milltargetcmds[@]}" >"${cachepath}/${cachefile}-${target}"
    fi
  else
    __mill_debug "No cache used"
    milltargetcmds=($(mill --disable-ticker resolve "${target}" 2>/dev/null))
  fi
  __mill_debug "Target args: " "${milltargetcmds[@]}"
  # Remove the aliases mill target from the list
  aliasobj=$(grep "extends Aliases" "${BUILDFILE}" | cut -d" " -f2)
  if [[ $aliasobj ]]; then
    milltargetcmds=("${milltargetcmds[@]/$aliasobj/}")
  fi
  compadd -S . -q "${milltargetcmds[@]}"
}

_mill "$@"
