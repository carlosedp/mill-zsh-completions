#compdef mill
# Install this file somewhere in your $FPATH (Zsh completion path)

# shellcheck shell=bash
# shellcheck disable=SC2207
__mill_debug() {
	# To enable debug, export in the shell the ZSH_COMP_DEBUG_FILE variable to a file.
	# Eg. ZSH_COMP_DEBUG_FILE="/tmp/mill_debug.txt"
	# Tail that file to see the debug output.
	local file="$ZSH_COMP_DEBUG_FILE"
	if [[ -n ${file} ]]; then
		echo "$*" >>"${file}"
	fi
}

_mill() {
	__mill_debug "\n========= starting completion logic =========="
	zstyle ':completion:*:mill:*' sort false
	projname=$(basename "${PWD}")          # Used to differenciate the cache files
	cachedata="true"                       # "true" or "false"
	cachepath="/tmp"                       # Where to store the cache files
	cachefile="zsh-cache-mill-${projname}" # Cache file names
	cachetime=60                           # Cache file validity in minutes

	__mill_debug "Project: ${projname}"

	local state line lastParam lastChar

	local -a opts
	opts+=(
		'--no-default-predef[Disable the default predef and run Ammonite with the minimal predef possible]'
		'--silent[Make ivy logs go silent instead of printing though failures will still throw exception]'
		'--watch[Watch and re-run your scripts when they change]'
		'-bsp[Run a BSP server against the passed scripts]'
		'--code[Pass in code to be run immediately in the REPL]:value:'
		'--home[The home directory of the REPL; where it looks for config and caches]:value:'
		'--predef[Lets you load your predef from a custom location, rather than the 'default' location in your Ammonite home]:value:'
		'--color[Enable or disable colored output; by default colors are enabled in both REPL and scripts if the console is interactive, and disabled otherwise]:value:'
		'--thin[Hide parts of the core of Ammonite and some of its dependencies. By default, the core of Ammonite and all of its dependencies can be seen by users from the Ammonite session. This option mitigates that via class loader isolation.]'
		'--help[Print the help message]'
		'--repl[Run Mill in interactive mode and start a build REPL. In this mode, no mill server will be used. Must be the first argument.]'
		'--no-server[Run Mill in interactive mode, suitable for opening REPLs and taking user input. In this mode, no mill server will be used. Must be the first argument.]'
		'--interactive[Run Mill in interactive mode, suitable for opening REPLs and taking user input. In this mode, no mill server will be used. Must be the first argument.]'
		'--version[Show mill version and exit]'
		'--bell[Ring the bell once if the run completes successfully, twice if it fails.]'
		'--disable-ticker[Disable ticker log (e.g. short-lived prints of stages and progress bars)]'
		'--debug[Show debug output on STDOUT]'
		'--keep-going[Continue build, even after build failures]'
		'--define[Define (or overwrite) a system property]:value:'
		'--jobs[Allow processing N targets in parallel. Use 1 to disable parallel and 0 to use as much threads as available processors.]:value:'
		'--import[Additional ivy dependencies to load into mill, e.g. plugins.]'
	)

	_arguments -C \
		"1: :->cmds" \
		"*::arg:->args"

	lastParam=${line[-1]}
	lastChar=${lastParam[-1]}

	__mill_debug "Vars: state: ${state} / line: ${line} / lastParam: ${lastParam} / lastChar: ${lastChar}"

	if [[ ${lastChar} == '.' ]]; then # Query target
		__mill_debug "Query tasks for ${lastParam}"
		_query_with_cache "${lastParam}"
	elif [[ ${lastParam} == *"."* ]]; then # Query task for the target
		IFS='.' read -rA tgt <<<"${lastParam}"
		__mill_debug "Query tasks for pre-typed ${tgt[1]}"
		_query_with_cache "${tgt[1]}."
	else # Query mill commands or options
		__mill_debug "Query root commands"
		_query_with_cache "root"
		_arguments -C "${opts[@]}"
	fi
}

_query_with_cache() {
	local target
	local -a milltargetcmds
	if [[ "${1}" == "root" ]];then
		target="_"
	else target="${1}_"
	fi
	target_clean=$(echo "${target//\\/}")
	target="${target_clean}"
	__mill_debug "Query cache param: ${1}"
	__mill_debug "Query target: ${target}"
	if [[ "${cachedata}" == "true" ]]; then
		# Cache the mill tasks
		if test "$(find ${cachepath}/ -name "${cachefile}-${target}" -mmin -${cachetime} 2>/dev/null)" && [[ "${cachepath}/${cachefile}-${target}" -nt build.sc ]]; then
			__mill_debug "Cache file ${cachepath}/${cachefile}-${target} exists and is newer than ${cachetime} mins and build.sc file not changed."
			milltargetcmds=($(cat "${cachepath}/${cachefile}-${target}"))
		else
			__mill_debug "Cache file ${cachepath}/${cachefile}-${target} does not exist or is older than ${cachetime} or build.sc file changed."
			milltargetcmds=($(mill --disable-ticker resolve "${target}" 2>/dev/null))
			echo "${milltargetcmds[@]}" >"${cachepath}/${cachefile}-${target}"
		fi
	else
		__mill_debug "No cache used"
		milltargetcmds=($(mill --disable-ticker resolve "${target}" 2>/dev/null))
	fi
	__mill_debug "Target args: " "${milltargetcmds[@]}"
	compadd -S . -q "${milltargetcmds[@]}"
}

_mill "$@"
